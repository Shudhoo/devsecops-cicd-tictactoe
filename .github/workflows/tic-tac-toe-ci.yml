# This is CI Pipeline for Tic Tac Toe project
# It runs on every push to the main branch and on pull requests 

name: Tic Tac Toe CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - Kubernetes/*
  pull_request:
    branches: [ main ]

jobs:
    Test:
        name: Run Unit Tests 
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '20'
                with-cache: 'npm'

            - name: Install Project Dependencies
              run: npm ci

            - name: Run Unit Tests
              run: npm test 
    
    Lint:
        name: Perform Static Code Analysis
        runs-on: ubuntu-latest
        steps:
            - name: checkout code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '20'
                with-cache: 'npm'

            - name: Install Project Dependencies
              run: npm ci

            - name: Run Linting & Save Linting Reports
              run: |
                mkdir -p reports
                npm run lint -- --format json --output-file reports/lint-report.json

            - name: Upload Linting Report
              uses: actions/upload-artifact@v4
              with:
                name: Lint-Report
                path: reports/lint-report.json
                
    Build:
        name: Build Project
        runs-on: ubuntu-latest
        needs: [Lint, Test]
        steps:
            - name: checkout code
              uses: actions/checkout@v2

            - name: Set Up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '20'
                with-cache: 'npm'

            - name: Install Project Dependencies
              run: npm ci

            - name: Build Project
              run: npm run build

            - name: Upload Project Build Artifacts
              uses: actions/upload-artifact@v4
              with:
                name: tic-tac-toe-build 
                path: dist/
    
    Build-Image:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: [Build]
        env:
            REGISTRY: ghcr.io
            IMAGE_NAME: ${{ github.repository }}
        steps:
            - name: checkout code
              uses: actions/checkout@v2

            - name: Download Artifacts
              uses: actions/download-artifact@v4
              with:
                name: tic-tac-toe-build
                path: ./dist

            - name : Set Up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GHCR_TOKEN }}
            
            - name: MetaData for Docker Image
              id: meta
              uses: docker/metadata-action@v4
              with:
                images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                tags: |
                    type=sha,format=long
            
            - name: Build Docker Image
              uses: docker/build-push-action@v5
              with:
                context: .
                file: Dockerfile
                push: false
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
                load: true

            - name: Run Trivy Vulnerability Scan
              uses: aquasecurity/trivy-action@master
              with:
                image-ref: ${{ steps.meta.outputs.tags }}
                format: 'table'
                exit-code: '1'
                ignore-unfixed: true
                vuln-type: 'os,library'
                severity: 'CRITICAL,HIGH'

            - name: Docker Push Image
              uses: docker/build-push-action@v5
              with:
                context: .
                file: Dockerfile
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

    Update_k8s:
        name: Update Kubernetes Deployment
        runs-on: ubuntu-latest
        needs: [Build-Image]
        steps:
            - name: Checkout Code
              uses: actions/checkout@v2
              with:
                token: ${{ secrets.GITHUB_TOKEN }}
            
            - name: Set Up Git Configuration
              run: |
                git config --global user.name "GitHub Actions"
                git config --global user.email "actions@github.com"

            - name: Update Kubernetes Deployment
              env:
                IMAGE_TAG: ${{ github.sha }}
                REGISTRY: ghcr.io
                GITHUB_REPOSITORY: ${{ github.repository }}
              run: |
                NEW_IMAGE="${REGISTRY}/${GITHUB_REPOSITORY}:${IMAGE_TAG}"

                sed -i "s|image: ${REGISTRY}/${GITHUB_REPOSITORY}:.*|image: ${NEW_IMAGE}|" kubernetes/deployment.yaml

                echo "Update Deployment to use image: ${NEW_IMAGE}"
                grep -A 1 "image:" kubernetes/deployment.yaml

            - name: Commit and Push Changes
              run: |
                git add kubernetes/deployment.yaml
                git commit -m "Update deployment to use new image ${IMAGE_TAG}"
                git push 

